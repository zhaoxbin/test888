=============================================================================
List of generated methods in project: WLC02

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_SYS_Init -Install pre-defined clock configurations.
   - clockMan1_CLOCK_SYS_UpdateConfiguration -Set system clock configuration according to pre-defined structure.
   - clockMan1_CLOCK_SYS_SetConfiguration -Set system clock configuration.
   - clockMan1_CLOCK_SYS_GetCurrentConfiguration -Get current system clock configuration.
   - clockMan1_CLOCK_SYS_GetErrorCallback -Get the callback which returns error in last clock switch.
   - clockMan1_CLOCK_SYS_GetFreq -Gets the clock frequency for a specific clock name.
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency.
   - clockMan1_CLOCK_DRV_SetModuleClock -Configures the system clocks.
   - clockMan1_CLOCK_DRV_SetSystemClock -Configures the system clocks.
   - clockMan1_CLOCK_DRV_GetSystemClockSource -Gets the system clock source.
   - clockMan1_CLOCK_DRV_SetClockSource -This function configures a clock source.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_ClearPending -Clear Pending Interrupt.
   - intMan1_INT_SYS_SetPending -Set Pending Interrupt.
   - intMan1_INT_SYS_GetPending -Get Pending Interrupt.
   - intMan1_INT_SYS_GetActive -Get Active Interrupt.

Module "flexTimer_mc1" (component ftm_mc)
   - flexTimer_mc1_FTM_DRV_Init -Initializes the FTM driver.
   - flexTimer_mc1_FTM_DRV_Deinit -Shuts down the FTM driver.
   - flexTimer_mc1_FTM_DRV_InitCounter -Initialize the FTM counter.
   - flexTimer_mc1_FTM_DRV_CounterStart -Starts the FTM counter.
   - flexTimer_mc1_FTM_DRV_CounterStop -Stops the FTM counter.
   - flexTimer_mc1_FTM_DRV_CounterRead -Reads back the current value of the FTM counter.
   - flexTimer_mc1_FTM_DRV_MaskOutputChannels -This function will mask the output of the channels and at match events will be 
                ignored by the masked channels.
   - flexTimer_mc1_FTM_DRV_SetInitialCounterValue -This function configure the initial counter value. The counter will get this 
                value after an overflow event.
   - flexTimer_mc1_FTM_DRV_SetHalfCycleReloadPoint -This function configure the value of the counter which will generates an 
                reload point.
   - flexTimer_mc1_FTM_DRV_SetSoftOutChnValue -This function will force the output value of a channel to a specific value. 
                Before using this function it's mandatory to mask the match events using FTM_DRV_MaskOutputChannels and to 
                enable software output control using FTM_DRV_SetSoftwareOutputChannelControl.
   - flexTimer_mc1_FTM_DRV_SetSoftwareOutputChannelControl -This function will configure which output channel can be software 
                controlled.
   - flexTimer_mc1_FTM_DRV_SetInvertingControl -This function will configure if the second channel of a pair will be inverted 
                or not.
   - flexTimer_mc1_FTM_DRV_SetModuloCounterValue -This function configure the maximum counter value.
   - flexTimer_mc1_FTM_DRV_SetSync -This function configures sync mechanism for some FTM registers ( MOD, CNINT, HCR, CnV, 
                OUTMASK, INVCTRL, SWOCTRL).
   - flexTimer_mc1_FTM_DRV_GetFrequency -Retrieves the frequency of the clock source feeding the FTM counter.
   - flexTimer_mc1_FTM_DRV_ConvertFreqToPeriodTicks -This function is used to covert the given frequency to period in ticks.

Module "canCom1"   (component flexcan)
   - canCom1_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - canCom1_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - canCom1_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - canCom1_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - canCom1_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - canCom1_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - canCom1_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - canCom1_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - canCom1_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - canCom1_FLEXCAN_DRV_ConfigRemoteResponseMb -Configures a transmit message buffer for remote frame response.
   - canCom1_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - canCom1_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - canCom1_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - canCom1_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - canCom1_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - canCom1_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - canCom1_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - canCom1_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - canCom1_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - canCom1_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - canCom1_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - canCom1_FLEXCAN_DRV_GetDefaultConfig -Initializes the FlexCAN peripheral.
   - canCom1_FLEXCAN_DRV_SetRxMb14Mask -Sets the FlexCAN Rx MB 14 mask (standard or extended).
   - canCom1_FLEXCAN_DRV_SetRxMb15Mask -Sets the FlexCAN Rx MB 15 mask (standard or extended).
   - canCom1_FLEXCAN_DRV_ConfigPN -Configures Pretended Networking settings.
   - canCom1_FLEXCAN_DRV_GetWMB -Extracts one of the frames which triggered the wake up event.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA channel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA channel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA channel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA channel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA channel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA channel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the channel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the channel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigMultiBlockTransfer -Configures a multiple block data transfer with DMA. This function 
                configures the descriptor for a multi block transfer.
   - dmaController1_EDMA_DRV_CancelTransfer -Cancels the remaining data transfer.
   - dmaController1_EDMA_DRV_SetChannelRequest -Configures the DMA request for the eDMA channel.
   - dmaController1_EDMA_DRV_ClearTCD -Clears all registers to 0 for the channel's TCD.
   - dmaController1_EDMA_DRV_SetSrcAddr -Configures the source address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcOffset -Configures the source address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcReadChunkSize -Configures the source data chunk size (transferred in a read sequence).
   - dmaController1_EDMA_DRV_SetDestAddr -Configures the destination address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestOffset -Configures the destination address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestWriteChunkSize -Configures the destination data chunk size (transferred in a write sequence)
                .
   - dmaController1_EDMA_DRV_SetMinorLoopBlockSize -Configures the number of bytes to be transferred in each service request of 
                the channel.
   - dmaController1_EDMA_DRV_SetMajorLoopIterationCount -Configures the number of major loop iterations.
   - dmaController1_EDMA_DRV_GetRemainingMajorIterationsCount -Returns the remaining major loop iteration count.
   - dmaController1_EDMA_DRV_SetScatterGatherLink -Configures the memory address of the next TCD, in scatter/gather mode.
   - dmaController1_EDMA_DRV_DisableRequestsOnTransferComplete -Disables/Enables the DMA request after the major loop completes 
                for the TCD.
   - dmaController1_EDMA_DRV_SetSrcLastAddrAdjustment -Configures the source address last adjustment.
   - dmaController1_EDMA_DRV_SetDestLastAddrAdjustment -Configures the destination address last adjustment.
   - dmaController1_EDMA_DRV_ConfigureInterrupt -Disables/Enables the channel interrupt requests.
   - dmaController1_EDMA_DRV_TriggerSwRequest -Triggers a sw request for the current channel.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "adConv1"   (component adc)
   - adConv1_ADC_DRV_InitConverterStruct -Initializes the converter configuration structure.
   - adConv1_ADC_DRV_ConfigConverter -Configures the converter with the given configuration structure.
   - adConv1_ADC_DRV_GetConverterConfig -Gets the current converter configuration.
   - adConv1_ADC_DRV_Reset -Resets the converter (sets all configurations to reset values)
   - adConv1_ADC_DRV_InitHwCompareStruct -Initializes the Hardware Compare configuration structure.
   - adConv1_ADC_DRV_ConfigHwCompare -Configures the Hardware Compare feature with the given configuration structure.
   - adConv1_ADC_DRV_GetHwCompareConfig -Gets the current Hardware Compare configuration.
   - adConv1_ADC_DRV_InitHwAverageStruct -Initializes the Hardware Average configuration structure.
   - adConv1_ADC_DRV_ConfigHwAverage -Configures the Hardware Average feature with the given configuration structure.
   - adConv1_ADC_DRV_GetHwAverageConfig -Gets the current Hardware Average configuration.
   - adConv1_ADC_DRV_InitChanStruct -Initializes the control channel configuration structure
   - adConv1_ADC_DRV_ConfigChan -Configures the selected control channel with the given configuration structure
   - adConv1_ADC_DRV_GetChanConfig -Gets the current control channel configuration for the selected channel index
   - adConv1_ADC_DRV_SetSwPretrigger -This function sets the software pretrigger - affects only first 4 control channels.
   - adConv1_ADC_DRV_WaitConvDone -Waits for a conversion/calibration to finish.
   - adConv1_ADC_DRV_GetConvCompleteFlag -Gets the control channel Conversion Complete Flag state
   - adConv1_ADC_DRV_GetChanResult -Gets the last result for the selected control channel
   - adConv1_ADC_DRV_AutoCalibration -Executes an Auto-Calibration.
   - adConv1_ADC_DRV_InitUserCalibrationStruct -Initializes the User Calibration configuration structure.
   - adConv1_ADC_DRV_ConfigUserCalibration -Configures the User Calibration feature with the given configuration structure.
   - adConv1_ADC_DRV_GetUserCalibration -Gets the current User Calibration configuration.
   - adConv1_ADC_DRV_GetInterruptNumber -Returns the interrupt number for the ADC instance.
   - adConv1_ADC_DRV_ClearLatchedTriggers -Clear latched triggers under processing.
   - adConv1_ADC_DRV_ClearTriggerErrors -Clear all latch trigger error.
   - adConv1_ADC_DRV_GetTriggerErrorFlags -This function returns the trigger error flags bits of the ADC instance.

Module "lpuart1"   (component lpuart)
   - lpuart1_LPUART_DRV_Init -Initializes an LPUART operation instance.
   - lpuart1_LPUART_DRV_Deinit -Shuts down the LPUART by disabling interrupts and transmitter/receiver.
   - lpuart1_LPUART_DRV_InstallRxCallback -Installs callback function for the LPUART receive.
   - lpuart1_LPUART_DRV_InstallTxCallback -Installs callback function for the LPUART transmit.
   - lpuart1_LPUART_DRV_SendDataBlocking -Sends data out through the LPUART module using a blocking method.
   - lpuart1_LPUART_DRV_SendDataPolling -Send out multiple bytes of data using polling method.
   - lpuart1_LPUART_DRV_SendData -Sends data out through the LPUART module using a non-blocking method. This enables an a-sync 
                method for transmitting data. When used with a non-blocking receive, the LPUART can perform a full duplex 
                operation. Non-blocking means that the function returns immediately. The application has to get the transmit 
                status to know when the transmit is complete.
   - lpuart1_LPUART_DRV_GetTransmitStatus -Returns whether the previous transmit is complete.
   - lpuart1_LPUART_DRV_AbortSendingData -Terminates a non-blocking transmission early.
   - lpuart1_LPUART_DRV_ReceiveDataBlocking -Gets data from the LPUART module by using a blocking method. Blocking means that 
                the function does not return until the receive is complete.
   - lpuart1_LPUART_DRV_ReceiveDataPolling -Receive multiple bytes of data using polling method.
   - lpuart1_LPUART_DRV_ReceiveData -Gets data from the LPUART module by using a non-blocking method. This enables an a-sync 
                method for receiving data. When used with a non-blocking transmission, the LPUART can perform a full duplex 
                operation. Non-blocking means that the function returns immediately. The application has to get the receive 
                status to know when the receive is complete.
   - lpuart1_LPUART_DRV_GetReceiveStatus -Returns whether the previous receive is complete.
   - lpuart1_LPUART_DRV_AbortReceivingData -Terminates a non-blocking receive early.
   - lpuart1_LPUART_DRV_SetBaudRate -Configures the LPUART baud rate.
   - lpuart1_LPUART_DRV_GetBaudRate -Returns the LPUART baud rate.
   - lpuart1_LPUART_DRV_SetTxBuffer -Sets the internal driver reference to the tx buffer.
   - lpuart1_LPUART_DRV_SetRxBuffer -Sets the internal driver reference to the rx buffer.

Module "flexTimer_pwm1" (component ftm_pwm)
   - flexTimer_pwm1_FTM_DRV_Init -Initializes the FTM driver.
   - flexTimer_pwm1_FTM_DRV_Deinit -Shuts down the FTM driver.
   - flexTimer_pwm1_FTM_DRV_DeinitPwm -Stops all PWM channels configured in param.
   - flexTimer_pwm1_FTM_DRV_InitPwm -Configures the duty cycle and frequency and starts outputting the PWM on all channels 
                configured in param .
   - flexTimer_pwm1_FTM_DRV_UpdatePwmChannel -This function updates the waveform output in PWM mode (duty cycle and phase).
   - flexTimer_pwm1_FTM_DRV_FastUpdatePwmChannels -This function will update the duty cycle of PWM output for multiple channels.
   - flexTimer_pwm1_FTM_DRV_UpdatePwmPeriod -This function will update the period of PWM signal in the channel output.
   - flexTimer_pwm1_FTM_DRV_UpdatePwmPeriodDither -This function will use in the PWM period dithering.
   - flexTimer_pwm1_FTM_DRV_UpdatePwmEdgeChannelDither -This function will use in the PWM edge dithering.
   - flexTimer_pwm1_FTM_PWM_DRV_IrqHandler -This function is used to workaround an errata E10856 for FTM.
   - flexTimer_pwm1_FTM_DRV_MaskOutputChannels -This function will mask the output of the channels and at match events will be 
                ignored by the masked channels.
   - flexTimer_pwm1_FTM_DRV_SetInitialCounterValue -This function configure the initial counter value. The counter will get 
                this value after an overflow event.
   - flexTimer_pwm1_FTM_DRV_SetHalfCycleReloadPoint -This function configure the value of the counter which will generates an 
                reload point.
   - flexTimer_pwm1_FTM_DRV_SetSoftOutChnValue -This function will force the output value of a channel to a specific value. 
                Before using this function it's mandatory to mask the match events using FTM_DRV_MaskOutputChannels and to 
                enable software output control using FTM_DRV_SetSoftwareOutputChannelControl.
   - flexTimer_pwm1_FTM_DRV_SetSoftwareOutputChannelControl -This function will configure which output channel can be software 
                controlled.
   - flexTimer_pwm1_FTM_DRV_SetInvertingControl -This function will configure if the second channel of a pair will be inverted 
                or not.
   - flexTimer_pwm1_FTM_DRV_SetModuloCounterValue -This function configure the maximum counter value.
   - flexTimer_pwm1_FTM_DRV_SetSync -This function configures sync mechanism for some FTM registers ( MOD, CNINT, HCR, CnV, 
                OUTMASK, INVCTRL, SWOCTRL).
   - flexTimer_pwm1_FTM_DRV_GetFrequency -Retrieves the frequency of the clock source feeding the FTM counter.
   - flexTimer_pwm1_FTM_DRV_ConvertFreqToPeriodTicks -This function is used to covert the given frequency to period in ticks.

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_SetMuxModeSel -This function configures the pin muxing
   - pin_mux_PINS_DRV_SetPinIntSel -This function configures the port pin interrupt/DMA request
   - pin_mux_PINS_DRV_GetPinIntSel -This function gets the current port pin interrupt/DMA request configuration
   - pin_mux_PINS_DRV_ClearPinIntFlagCmd -This function clears the individual pin-interrupt status flag
   - pin_mux_PINS_DRV_EnableDigitalFilter -This function enables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_DisableDigitalFilter -This function disables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_ConfigDigitalFilter -This function configures digital filter for port with given configuration
   - pin_mux_PINS_DRV_GetPortIntFlag -This function reads the entire port interrupt status flag
   - pin_mux_PINS_DRV_ClearPortIntFlagCmd -This function clears the entire port interrupt status flag
   - pin_mux_PINS_DRV_SetGlobalPinControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same pin configuration
   - pin_mux_PINS_DRV_SetGlobalIntControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same interrupt configuration
   - pin_mux_PINS_DRV_GetPinsDirection -This function returns the current pins directions for a port. Pins corresponding to 
                bits with value of '1' are configured as output and pins corresponding to bits with value of '0' are configured 
                as input.
   - pin_mux_PINS_DRV_SetPinDirection -This function configures the direction for the given pin, with the given value('1' for 
                pin to be configured as output and '0' for pin to be configured as input)
   - pin_mux_PINS_DRV_SetPinsDirection -This function sets the direction configuration for all pins in a port. Pins 
                corresponding to bits with value of '1' will be configured as output and pins corresponding to bits with value 
                of '0' will be configured as input.
   - pin_mux_PINS_DRV_SetPortInputDisable -This function sets the pins input state for a port. Pins corresponding to bits with 
                value of '1' will not be configured as input and pins corresponding to bits with value of '0' will be 
                configured as input
   - pin_mux_PINS_DRV_GetPortInputDisable -This function returns the current pins input state for a port. Pins corresponding to 
                bits with value of '1' are not configured as input and pins corresponding to bits with value of '0' are 
                configured as input
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "Flash1"    (component flash)
   - Flash1_FLASH_DRV_Init -Flash initialization.
   - Flash1_FLASH_DRV_GetPFlashProtection -P-Flash get protection.
   - Flash1_FLASH_DRV_SetPFlashProtection -P-Flash set protection.
   - Flash1_FLASH_DRV_GetSecurityState -Flash get security state.
   - Flash1_FLASH_DRV_SecurityBypass -Flash security bypass.
   - Flash1_FLASH_DRV_EraseAllBlock -Flash erase all Blocks.
   - Flash1_FLASH_DRV_VerifyAllBlock -Flash verify all Blocks.
   - Flash1_FLASH_DRV_EraseSector -Flash erase sector.
   - Flash1_FLASH_DRV_VerifySection -Flash verify sector.
   - Flash1_FLASH_DRV_EraseSuspend -Flash erase suspend.
   - Flash1_FLASH_DRV_EraseResume -Flash erase resume.
   - Flash1_FLASH_DRV_ReadOnce -Flash read once.
   - Flash1_FLASH_DRV_ProgramOnce -Flash program once.
   - Flash1_FLASH_DRV_Program -Flash program.
   - Flash1_FLASH_DRV_ProgramCheck -Flash program check.
   - Flash1_FLASH_DRV_CheckSum -Calculate check sum.
   - Flash1_FLASH_DRV_ProgramSection -Flash program section.
   - Flash1_FLASH_DRV_EraseBlock -Flash erase block.
   - Flash1_FLASH_DRV_VerifyBlock -Flash verify block.
   - Flash1_FLASH_DRV_GetEERAMProtection -EERAM get protection.
   - Flash1_FLASH_DRV_SetEERAMProtection -EERAM set protection.
   - Flash1_FLASH_DRV_SetFlexRamFunction -Flash Set FlexRam function command.
   - Flash1_FLASH_DRV_EEEWrite -EEPROM Emulator Write.
   - Flash1_FLASH_DRV_DEFlashPartition -Flash D/E-Flash Partition.
   - Flash1_FLASH_DRV_GetDFlashProtection -D-Flash get protection.
   - Flash1_FLASH_DRV_SetDFlashProtection -D-Flash set protection.
   - Flash1_FLASH_DRV_PFlashSwap -swap between the two half of total logical P-Flash memory blocks within the memory map
   - Flash1_FLASH_DRV_PFlashSwapCtl -implements swap control command corresponding with swap control code provided via swapcmd 
                parameter
   - Flash1_FLASH_DRV_EraseAllBlockUnsecure -Flash erase all Blocks.
   - Flash1_FLASH_DRV_EnableCmdCompleteInterupt -Enable the command complete interrupt.
   - Flash1_FLASH_DRV_DisableCmdCompleteInterupt -Disable the command complete interrupt.
   - Flash1_FLASH_DRV_GetCmdCompleteFlag -Check the command complete flag has completed or not.
   - Flash1_FLASH_DRV_EnableReadColisionInterupt -Enable the read collision error interrupt.
   - Flash1_FLASH_DRV_DisableReadColisionInterupt -Disable the read collision error interrupt.
   - Flash1_FLASH_DRV_GetReadColisionFlag -Check the read collision error flag is detected or not.
   - Flash1_FLASH_DRV_ClearReadColisionFlag -Clear the read collision error flag.
   - Flash1_FLASH_DRV_EnableDoubleBitFaultInterupt -Enable the double bit fault detect interrupt.
   - Flash1_FLASH_DRV_DisableDoubleBitFaultInterupt -Disable the double bit fault detect interrupt.
   - Flash1_FLASH_DRV_GetDoubleBitFaultFlag -Check the double bit fault flag is detected or not.
   - Flash1_FLASH_DRV_ClearDoubleBitFaultFlag -Clear the double bit fault detect flag.
   - Flash1_FLASH_DRV_ForceDoubleBitFaultDetectCmd -Force Double Bit Fault Detect.

Module "lpi2c1"    (component lpi2c)
   - lpi2c1_LPI2C_DRV_MasterInit -Initialize the LPI2C master mode driver.
   - lpi2c1_LPI2C_DRV_MasterDeinit -De-initialize the LPI2C master mode driver.
   - lpi2c1_LPI2C_DRV_MasterGetBaudRate -Get the currently configured baud rate.
   - lpi2c1_LPI2C_DRV_MasterSetBaudRate -Set the baud rate for any subsequent I2C communication.
   - lpi2c1_LPI2C_DRV_MasterSetSlaveAddr -Set the slave address for any subsequent I2C communication.
   - lpi2c1_LPI2C_DRV_MasterSendData -Perform a non-blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterSendDataBlocking -Perform a blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterAbortTransferData -Abort a non-blocking I2C Master transmission or reception.
   - lpi2c1_LPI2C_DRV_MasterReceiveData -Perform a non-blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterReceiveDataBlocking -Perform a blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterGetTransferStatus -Return the current status of the I2C master transfer.
   - lpi2c1_LPI2C_DRV_MasterIRQHandler -Handle master operation when I2C interrupt occurs.
   - lpi2c1_LPI2C_DRV_SlaveInit -Initialize the I2C slave mode driver.
   - lpi2c1_LPI2C_DRV_SlaveDeinit -De-initialize the I2C slave mode driver.
   - lpi2c1_LPI2C_DRV_SlaveSetTxBuffer -Provide a buffer for transmitting data.
   - lpi2c1_LPI2C_DRV_SlaveSetRxBuffer -Provide a buffer for receiving data.
   - lpi2c1_LPI2C_DRV_SlaveSendData -Perform a non-blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveSendDataBlocking -Perform a blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveReceiveData -Perform a non-blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveReceiveDataBlocking -Perform a blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveGetTransferStatus -Return the current status of the I2C slave transfer.
   - lpi2c1_LPI2C_DRV_SlaveAbortTransferData -Abort a non-blocking I2C Master transmission or reception.
   - lpi2c1_LPI2C_DRV_SlaveIRQHandler -Handle slave operation when I2C interrupt occurs.

Module "lpit1"     (component lpit)
   - lpit1_LPIT_DRV_Init -Initializes the LPIT module.
   - lpit1_LPIT_DRV_Deinit -De-initializes LPIT module.
   - lpit1_LPIT_DRV_InitChannel -Initializes the LPIT channel.
   - lpit1_LPIT_DRV_StartTimerChannels -Starts the timer channel counting.
   - lpit1_LPIT_DRV_StopTimerChannels -Stops the timer channel counting.
   - lpit1_LPIT_DRV_SetTimerPeriodByUs -Sets the timer channel period in microseconds.
   - lpit1_LPIT_DRV_SetTimerPeriodInDual16ModeByUs -Sets the timer channel period in microseconds when the timer channel mode 
                is dual 16 bit periodic counter.
   - lpit1_LPIT_DRV_GetTimerPeriodByUs -Gets the timer channel period in microseconds.
   - lpit1_LPIT_DRV_GetCurrentTimerUs -Gets the current timer channel counting value in microseconds.
   - lpit1_LPIT_DRV_SetTimerPeriodByCount -Sets the timer channel period in count unit.
   - lpit1_LPIT_DRV_SetTimerPeriodInDual16ModeByCount -Sets the timer channel period in count when the timer channel mode is 
                dual 16 bit periodic counter.
   - lpit1_LPIT_DRV_GetTimerPeriodByCount -Gets the current timer channel period in count unit.
   - lpit1_LPIT_DRV_GetCurrentTimerCount -Gets the current timer channel counting value in count.
   - lpit1_LPIT_DRV_EnableTimerChannelInterrupt -Enables the interrupt generation of timer channel.
   - lpit1_LPIT_DRV_DisableTimerChannelInterrupt -Disables the interrupt generation of timer channel.
   - lpit1_LPIT_DRV_GetInterruptFlagTimerChannels -Gets the current interrupt flag of timer channels.
   - lpit1_LPIT_DRV_ClearInterruptFlagTimerChannels -Clears the interrupt flag of timer channels.

Module "watchdog1" (component wdog)
   - watchdog1_WDOG_DRV_Init -Initializes the WDOG driver.
   - watchdog1_WDOG_DRV_Deinit -De-initializes the WDOG driver.
   - watchdog1_WDOG_DRV_GetConfig -Gets the current configuration of the WDOG.
   - watchdog1_WDOG_DRV_GetDefaultConfig -Gets default configuration of the WDOG.
   - watchdog1_WDOG_DRV_SetInt -Enables/Disables the WDOG timeout interrupt and sets a function to be called when a timeout 
                interrupt is received, before reset.
   - watchdog1_WDOG_DRV_ClearIntFlag -Clear interrupt flag of the WDOG.
   - watchdog1_WDOG_DRV_Trigger -Refreshes the WDOG counter.
   - watchdog1_WDOG_DRV_GetCounter -Gets the value of the WDOG counter.
   - watchdog1_WDOG_DRV_SetWindow -Set window mode and window value of the WDOG.
   - watchdog1_WDOG_DRV_SetMode -Sets the mode operation of the WDOG.
   - watchdog1_WDOG_DRV_SetTimeout -Sets the value of the WDOG timeout.
   - watchdog1_WDOG_DRV_SetTestMode -This function changes the test mode of the WDOG. If the WDOG is tested in mode, software 
                should set this field to 0x01U in order to indicate that the WDOG is functioning normally.
   - watchdog1_WDOG_DRV_GetTestMode -This function verifies the test mode of the WDOG.

Module "pwrMan1"   (component power_manager)
   - pwrMan1_POWER_SYS_Init -Power manager initialization for operation.
   - pwrMan1_POWER_SYS_Deinit -This function deinitializes the Power manager.
   - pwrMan1_POWER_SYS_SetMode -This function configures the power mode.
   - pwrMan1_POWER_SYS_GetLastMode -This function returns the last successfully set power mode.
   - pwrMan1_POWER_SYS_GetLastModeConfig -This function returns the user configuration structure of the last successfully set 
                power mode.
   - pwrMan1_POWER_SYS_GetCurrentMode -This function returns currently running power mode.
   - pwrMan1_POWER_SYS_GetErrorCallbackIndex -This function returns the last failed notification callback.
   - pwrMan1_POWER_SYS_GetErrorCallback -This function returns the callback configuration structure for the last failed 
                notification.
   - pwrMan1_POWER_SYS_GetResetSrcStatusCmd -This function gets the current reset source status for specified source.

Module "Cpu"       (component S32K144_64)
   - Cpu_SystemInit -This function disables the watchdog, enables FPU and the power mode protection. SystemInit is called from 
                startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock. It must be called whenever the core clock is changed during program execution
   - Cpu_SystemSoftwareReset -This method initiates initiate a system reset.

===================================================================================
